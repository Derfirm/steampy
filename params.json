{
  "name": "Steampy",
  "tagline": "A Steam trading library for python 3",
  "body": "Steam Trade Offers Client for Python\r\n=======\r\n\r\n[![PayPal Donate Button](https://img.shields.io/badge/donate-paypal-orange.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=XC8BMJ8QRD9ZY \"Donate to this project via PayPal\")\r\n\r\n`steampy` is a library for Python, inspired by node-steam-tradeoffers, node-steam and other libraries for Node.js.\r\nIt was designed as a simple lightweight library, combining features of many steam libraries from Node.js into a single python module.\r\n`steampy` is capable of logging into steam, fetching trade offers and handling them in simple manner, using steam user credentials\r\nand SteamGuard file(no need to extract and pass sessionID and webCookie).\r\n`steampy` is developed with Python 3 using type hints and many other features.\r\n\r\nTable of Content\r\n================\r\n\r\n* [Installation](https://github.com/bukson/steampy#installation)\r\n\r\n* [Usage](https://github.com/bukson/steampy#usage)\r\n\r\n* [Examples](https://github.com/bukson/steampy#examples)\r\n\r\n* [SteamClient methods](https://github.com/bukson/steampy#steamclient-methods)\r\n\r\n* [Guard module functions](https://github.com/bukson/steampy#guard-module-functions)\r\n\r\n* [Test](https://github.com/bukson/steampy#test)\r\n\r\n* [License](https://github.com/bukson/steampy#license)\r\n\r\n\r\nInstallation\r\n============\r\n\r\n```\r\npip install steampy\r\n```\r\n\r\nUsage\r\n=======\r\n[Obtaining API Key](http://steamcommunity.com/dev/apikey)\r\n\r\n[Obtaining SteamGuard from mobile device]( https://github.com/SMVampire/SteamBotDev/wiki )\r\n\r\n[Obtaining SteamGuard using Android emulation]( https://github.com/codepath/android_guides/wiki/Genymotion-2.0-Emulators-with-Google-Play-support)\r\n\r\n```python\r\nfrom steampy.client import SteamClient\r\n\r\nsteam_client = SteamClient('MY_API_KEY')\r\nsteam_client.login('MY_USERNAME', 'MY_PASSWORD', 'PATH_TO_STEAMGUARD_FILE')\r\n```\r\n\r\nExamples\r\n========\r\n\r\nYou'll need to obtain your API key and SteamGuard file in order to run the examples, \r\nand then fill login and password in `storehose.py` file.\r\nThe `storehouse.py` file contains an example of handling incoming trade offers.\r\n\r\n```\r\npython storehouse.py\r\n```\r\n\r\nSteamClient methods\r\n===================\r\n\r\nUnless specified in documentation, the method does not require login to work(it uses API Key from constructor instead)\r\n\r\n\r\n**login(username: str, password: str, steam_guard: str) -> requests.Response**\r\n\r\nLog into the steam account. Allows to accept trade offers and some other methods.\r\n\r\n```python\r\nfrom steampy.client import SteamClient\r\n\r\nsteam_client = SteamClient('MY_API_KEY')\r\nsteam_client.login('MY_USERNAME', 'MY_PASSWORD', 'PATH_TO_STEAMGUARD_FILE')\r\n```\r\n\r\n**api_call(request_method: str, interface: str, api_method: str, version: str, params: dict = None) -> requests.Response**\r\n\r\nDirectly call api method from the steam api services.\r\n\r\n[Official steam api site](https://developer.valvesoftware.com/wiki/Steam_Web_API)\r\n\r\n[Unofficial but more elegant](https://lab.xpaw.me/steam_api_documentation.html)\r\n\r\n```python\r\nfrom steampy.client import SteamClient\r\n\r\nsteam_client = SteamClient('MY_API_KEY')\r\nparams = {'key': 'MY_API_KEY'}\r\nsummaries =  steam_client.api_call('GET', 'IEconService', 'GetTradeOffersSummary', 'v1', params).json()\r\n```\r\n**get_trade_offers_summary() -> dict**\r\n\r\n\r\n**get_trade_offers() -> dict**\r\n\r\nFetching trade offers from steam using an API call.\r\nMethod is fetching offers with descriptions that satisfy conditions:\r\n    * Are sent by us or others\r\n    * Are active (means no historical, does not mean having offer state active!)\r\n    * Are not historical\r\n    * No time limitation\r\n    \r\n**get_trade_offer(trade_offer_id: str) -> dict**\r\n\r\n\r\n**make_offer(items_from_me: List[Asset], items_from_them: List[Asset], partner_steam_id: str, message:str ='') -> dict**\r\n\r\nUsing `SteamClient.login` method is required before usage\r\n`Asset` is class defined in `client.py`, you can obtain `asset_id` from `SteamClient.get_my_inventory` method.\r\nThis method also uses identity secret from SteamGuard file to confirm the trade offer.\r\nNo need to manually confirm it on mobile app or email.\r\n\r\n```python\r\nfrom steampy.client import SteamClient, Asset\r\nfrom steampy.utils import GameOptions\r\n\r\nsteam_client = SteamClient('MY_API_KEY')\r\nsteam_client.login('MY_USERNAME', 'MY_PASSWORD', 'PATH_TO_STEAMGUARD_FILE')\r\npartner_id = 'PARTNER_ID'\r\ngame = GameOptions.CS\r\nmy_items = client.get_my_inventory(game)\r\npartner_items = client.get_partner_inventory(partner_id, game)\r\nmy_first_item = next(iter(my_items.values()))\r\npartner_first_item = next(iter(partner_items.values()))\r\nmy_asset = Asset(my_first_item['id'], game)\r\npartner_asset = Asset(partner_first_item['id'], game)\r\nclient.make_offer([my_asset], [partner_asset], partner_id, 'Test offer')\r\n```\r\n\r\n**accept_trade_offer(trade_offer_id: str) -> dict**\r\n\r\nUsing `SteamClient.login` method is required before usage\r\nThis method also uses identity secret from SteamGuard file to confirm the trade offer.\r\nNo need to manually confirm it on mobile app or email.\r\n\r\n**decline_trade_offer(trade_offer_id: str) -> dict**\r\n\r\nDecline trade offer that **other** user sent to us.\r\n\r\n**cancel_trade_offer(trade_offer_id: str) -> dict**\r\n\r\nCancel trade offer that **we** sent to other user.\r\n\r\n**get_price(item_hash_name: str, game: GameOptions, currency: str = Currency.USD) -> dict**\r\n\r\nGames are defined in GameOptions class, currently `GameOptions.DOTA2` and `GameOptions.CS`\r\n\r\nCurrencies are defined in Currency class, currently `Currency.USD`, `Currency.GBP`, `Currency.EURO`, `Currency.CHF`\r\n\r\nDefault currency is USD\r\n\r\n```python\r\nclient = SteamClient(self.credentials.api_key)\r\nitem = 'M4A1-S | Cyrex (Factory New)'\r\nclient.fetch_price(item, game=GameOptions.CS)\r\n{'volume': '208', 'lowest_price': '$11.30 USD', 'median_price': '$11.33 USD', 'success': True}\r\n```\r\n\r\n**get_my_inventory(game: GameOptions, merge: bool = True) -> dict**\r\n\r\nUsing `SteamClient.login` method is required before usage\r\n\r\nIf `merege` is set `True` then inventory items are merged from items data and items description into dict where items `id` is key\r\nand descriptions merged with data are value.\r\n\r\nInventory entries looks like this:\r\n```python\r\n{'7146788981': {'actions': [{'link': 'steam://rungame/730/76561202255233023/+csgo_econ_action_preview%20S%owner_steamid%A%assetid%D316070896107169653',\r\n                             'name': 'Inspect in Game...'}],\r\n                'amount': '1',\r\n                'appid': '730',\r\n                'background_color': '',\r\n                'classid': '1304827205',\r\n                'commodity': 0,\r\n                'contextid': '2',\r\n                'descriptions': [{'type': 'html',\r\n                                  'value': 'Exterior: Field-Tested'},\r\n                                 {'type': 'html', 'value': ' '},\r\n                                 {'type': 'html',\r\n                                  'value': 'Powerful and reliable, the AK-47 '\r\n                                           'is one of the most popular assault '\r\n                                           'rifles in the world. It is most '\r\n                                           'deadly in short, controlled bursts '\r\n                                           'of fire. It has been painted using '\r\n                                           'a carbon fiber hydrographic and a '\r\n                                           'dry-transfer decal of a red '\r\n                                           'pinstripe.\\n'\r\n                                           '\\n'\r\n                                           '<i>Never be afraid to push it to '\r\n                                           'the limit</i>'},\r\n                                 {'type': 'html', 'value': ' '},\r\n                                 {'app_data': {'def_index': '65535',\r\n                                               'is_itemset_name': 1},\r\n                                  'color': '9da1a9',\r\n                                  'type': 'html',\r\n                                  'value': 'The Phoenix Collection'},\r\n                                 {'type': 'html', 'value': ' '},\r\n                                 {'app_data': {'def_index': '65535'},\r\n                                  'type': 'html',\r\n                                  'value': '<br><div id=\"sticker_info\" '\r\n                                           'name=\"sticker_info\" title=\"Sticker '\r\n                                           'Details\" style=\"border: 2px solid '\r\n                                           'rgb(102, 102, 102); border-radius: '\r\n                                           '6px; width=100; margin:4px; '\r\n                                           'padding:8px;\"><center><img '\r\n                                           'width=64 height=48 '\r\n                                           'src=\"https://steamcdn-a.akamaihd.net/apps/730/icons/econ/stickers/eslkatowice2015/pentasports.a6b0ddffefb5507453456c0d2c35b6a57821c171.png\"><img '\r\n                                           'width=64 height=48 '\r\n                                           'src=\"https://steamcdn-a.akamaihd.net/apps/730/icons/econ/stickers/eslkatowice2015/pentasports.a6b0ddffefb5507453456c0d2c35b6a57821c171.png\"><img '\r\n                                           'width=64 height=48 '\r\n                                           'src=\"https://steamcdn-a.akamaihd.net/apps/730/icons/econ/stickers/eslkatowice2015/pentasports.a6b0ddffefb5507453456c0d2c35b6a57821c171.png\"><img '\r\n                                           'width=64 height=48 '\r\n                                           'src=\"https://steamcdn-a.akamaihd.net/apps/730/icons/econ/stickers/cologne2015/mousesports.3e75da497d9f75fa56f463c22db25f29992561ce.png\"><br>Sticker: '\r\n                                           'PENTA Sports  | Katowice 2015, '\r\n                                           'PENTA Sports  | Katowice 2015, '\r\n                                           'PENTA Sports  | Katowice 2015, '\r\n                                           'mousesports | Cologne '\r\n                                           '2015</center></div>'}],\r\n                'icon_drag_url': '',\r\n                'icon_url': '-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpot7HxfDhjxszJemkV09-5lpKKqPrxN7LEmyVQ7MEpiLuSrYmnjQO3-UdsZGHyd4_Bd1RvNQ7T_FDrw-_ng5Pu75iY1zI97bhLsvQz',\r\n                'icon_url_large': '-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpot7HxfDhjxszJemkV09-5lpKKqPrxN7LEm1Rd6dd2j6eQ9N2t2wK3-ENsZ23wcIKRdQE2NwyD_FK_kLq9gJDu7p_KyyRr7nNw-z-DyIFJbNUz',\r\n                'id': '7146788981',\r\n                'instanceid': '480085569',\r\n                'market_actions': [{'link': 'steam://rungame/730/76561202255233023/+csgo_econ_action_preview%20M%listingid%A%assetid%D316070896107169653',\r\n                                    'name': 'Inspect in Game...'}],\r\n                'market_hash_name': 'AK-47 | Redline (Field-Tested)',\r\n                'market_name': 'AK-47 | Redline (Field-Tested)',\r\n                'market_tradable_restriction': '7',\r\n                'marketable': 1,\r\n                'name': 'AK-47 | Redline',\r\n                'name_color': 'D2D2D2',\r\n                'owner_descriptions': '',\r\n                'tags': [{'category': 'Type',\r\n                          'category_name': 'Type',\r\n                          'internal_name': 'CSGO_Type_Rifle',\r\n                          'name': 'Rifle'},\r\n                         {'category': 'Weapon',\r\n                          'category_name': 'Weapon',\r\n                          'internal_name': 'weapon_ak47',\r\n                          'name': 'AK-47'},\r\n                         {'category': 'ItemSet',\r\n                          'category_name': 'Collection',\r\n                          'internal_name': 'set_community_2',\r\n                          'name': 'The Phoenix Collection'},\r\n                         {'category': 'Quality',\r\n                          'category_name': 'Category',\r\n                          'internal_name': 'normal',\r\n                          'name': 'Normal'},\r\n                         {'category': 'Rarity',\r\n                          'category_name': 'Quality',\r\n                          'color': 'd32ce6',\r\n                          'internal_name': 'Rarity_Legendary_Weapon',\r\n                          'name': 'Classified'},\r\n                         {'category': 'Exterior',\r\n                          'category_name': 'Exterior',\r\n                          'internal_name': 'WearCategory2',\r\n                          'name': 'Field-Tested'},\r\n                         {'category': 'Tournament',\r\n                          'category_name': 'Tournament',\r\n                          'internal_name': 'Tournament6',\r\n                          'name': '2015 ESL One Katowice'},\r\n                         {'category': 'Tournament',\r\n                          'category_name': 'Tournament',\r\n                          'internal_name': 'Tournament7',\r\n                          'name': '2015 ESL One Cologne'},\r\n                         {'category': 'TournamentTeam',\r\n                          'category_name': 'Team',\r\n                          'internal_name': 'Team39',\r\n                          'name': 'PENTA Sports'},\r\n                         {'category': 'TournamentTeam',\r\n                          'category_name': 'Team',\r\n                          'internal_name': 'Team29',\r\n                          'name': 'mousesports'}],\r\n                'tradable': 1,\r\n                'type': 'Classified Rifle'}}\r\n```\r\n\r\n**get_partner_inventory(partner_steam_id: str, game: GameOptions, merge: bool = True) -> dict**\r\n\r\nUsing `SteamClient.login` method is required before usage\r\n\r\nInventory items can be merged like in `SteamClient.get_my_inventory` method\r\n\r\nguard module functions\r\n======================\r\n\r\n**load_steam_guard(steam_guard: str) -> dict**\r\n\r\nLoad and parse SteamGuard file\r\n\r\n**generate_one_time_code(shared_secret: str, timestamp: int= int(time.time())) -> str**\r\n\r\nGenerate one time code for logging into Steam using shared_secret from SteamGuard file.\r\nDefault timestamp is current time.\r\n\r\n**generate_confirmation_key(identity_secret: str, tag: str, timestamp: int = int(time.time())) -> bytes**\r\n\r\nGenerate mobile device confirmation key for accepting trade offer. \r\nDefault timestamp is current time.\r\n\r\nTest\r\n====\r\n\r\nAll public methods are documented and tested. \r\n`guard` module has unit tests, `client` uses an acceptance test.\r\nFor the acceptance test you have to put `credentials.pwd` and `Steamguard` file into `test` directory\r\n\r\nExample `credentials.pwd` file:\r\n\r\n```\r\naccount1 password1 api_key1\r\naccount2 password2 api_key2\r\n```\r\n\r\nIn some tests you also have to obtain `transaction_id`.\r\nYou can do it by `SteamClient.get_trade_offers` or by logging manually into steam account in browser and get it from url\r\n\r\nIn some tests you also have to obtain partner steam id.\r\nYou can do it by by logging manually into steam account in browser and get it from url\r\n\r\nLicense\r\n=======\r\n\r\nMIT License\r\n\r\nCopyright (c) 2016 [Michał Bukowski](gigibukson@gmail.com)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}