{
  "name": "Steampy",
  "tagline": "A Steam trading library for python 3",
  "body": "Steam Trade Offers Client for Python\r\n=======\r\n\r\n`steampy` is a library for Python, inspired by node-steam-tradeoffers, node-steam and others libraries for Node.js.\r\nIt was designed as a simple lightweight library, combining features of many steam libraries from Node.js in one python module.\r\n`steampy` is capable of logging to steam, fetching trade offers and handle them in simple manner, using steam user credentials\r\nand SteamGuard file(no need to extract and pass sessionID and webCookie).\r\n`steampy` is developed with Python 3 using type hints and many other features.\r\n\r\nInstallation\r\n============\r\n\r\n```\r\npip install steampy\r\n```\r\n\r\nUsage\r\n=======\r\n[Obtaining API Key](http://steamcommunity.com/dev/apikey)\r\n\r\n[Obtaining SteamGuard from mobile device]( https://github.com/SMVampire/SteamBotDev/wiki )\r\n\r\n[Obtaining SteamGuard using Android emulation]( https://github.com/codepath/android_guides/wiki/Genymotion-2.0-Emulators-with-Google-Play-support)\r\n\r\n```\r\nfrom steampy.client import SteamClient\r\n\r\nsteam_client = SteamClient('MY_API_KEY')\r\nsteam_client.login('MY_USERNAME', 'MY_PASSWORD', 'PATH_TO_STEAMGUARD_FILE')\r\n```\r\n\r\nExamples\r\n========\r\n\r\nYou'll need to install obtain your API key and SteamGuard file in order to run the examples, \r\nant then fill login and password in `storehose.py` file.\r\nThe `storehouse.py` file contains an example of handling incoming trade offers.\r\n\r\n```\r\npython storehouse.py\r\n```\r\n\r\nMethods\r\n=======\r\n\r\nIf not specified in documentation, method does not require login to work(it uses API Key from constructor instead)\r\n\r\n\r\n**login(username: str, password: str, steam_guard: str) -> requests.Response**\r\n\r\nLog in to steam account. Allows to accept trade offers and some other methods.\r\n\r\n```\r\nfrom steampy.client import SteamClient\r\n\r\nsteam_client = SteamClient('MY_API_KEY')\r\nsteam_client.login('MY_USERNAME', 'MY_PASSWORD', 'PATH_TO_STEAMGUARD_FILE')\r\n```\r\n\r\n**api_call(request_method: str, interface: str, api_method: str, version: str, params: dict = None) -> requests.Response**\r\n\r\nDirectly call api method from steam api services\r\n\r\n[Official steam api site](https://developer.valvesoftware.com/wiki/Steam_Web_API)\r\n\r\n[Unofficial but more elegant](https://lab.xpaw.me/steam_api_documentation.html)\r\n\r\n```\r\nfrom steampy.client import SteamClient\r\n\r\nsteam_client = SteamClient('MY_API_KEY')\r\nparams = {'key': self._api_key}\r\nsummaries =  steam_client.api_call('GET', 'IEconService', 'GetTradeOffersSummary', 'v1', params).json()\r\n```\r\n**get_trade_offers_summary() -> dict**\r\n\r\n\r\n**get_trade_offers() -> dict**\r\n\r\nFetch trade offers from steam using an API call.\r\nMethod is fetching offers with descriptions that satisfy conditions:\r\n    * Are sent by us or others\r\n    * Are active (means no historical, does not mean having offer state active!)\r\n    * Are not historical\r\n    * No time limitation\r\n    \r\n**get_trade_offer(trade_offer_id: str) -> dict**\r\n\r\n\r\n**accept_trade_offer(trade_offer_id: str) -> dict**\r\n\r\nUsing `SteamClient.login` method is required before usage\r\nThis method also use identity secret from SteamGuard file to confirm trade offer.\r\nNo need to manually confirm it on mobile app or email.\r\n\r\n**decline_trade_offer(trade_offer_id: str) -> dict**\r\n\r\nDecline trade offer that **other** user sent to us.\r\n\r\n**cancel_trade_offer(trade_offer_id: str) -> dict**\r\n\r\nCancel trade offer that **we** sent to other user.\r\n\r\n**get_price(item_hash_name: str, game: GameOptions, currency: str = Currency.USD) -> dict**\r\n\r\nGames are defined in GameOptions class, currently `GameOptions.DOTA2` and `GameOptions.CS`\r\n\r\nCurrencies are defined in Currency class, currently `Currency.USD`, `Currency.GBP`, `Currency.EURO`, `Currency.CHF`\r\n\r\nDefault currency is USD\r\n\r\n```\r\nclient = SteamClient(self.credentials.api_key)\r\nitem = 'M4A1-S | Cyrex (Factory New)'\r\nclient.fetch_price(item, game=GameOptions.CS)\r\n{'volume': '208', 'lowest_price': '$11.30 USD', 'median_price': '$11.33 USD', 'success': True}\r\n```\r\n\r\n**get_my_inventory(self, game: GameOptions) -> dict**\r\n\r\nUsing `SteamClient.login` method is required before usage\r\n\r\nTest\r\n====\r\n\r\nAll public methods are documented and tested. \r\n`guard` module has unit tests, `client` uses acceptance test.\r\nFor acceptance test you have to put `credentials.pwd` and `Steamguard` file into `test` directory.\r\n\r\nExample `credentials.pwd` file:\r\n\r\n```\r\naccount1 password1 api_key1\r\naccount2 password2 api_key2\r\n```\r\n\r\nIn some test you also have to obtain `transaction_id`.\r\nYou can do it by `SteamClient.get_trade_offers` or by logging manually into steam account in browser and get it from url\r\n\r\nLicense\r\n=======\r\n\r\nMIT License\r\n\r\nCopyright (c) 2016 [Micha≈Ç Bukowski](gigibukson@gmail.com)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}